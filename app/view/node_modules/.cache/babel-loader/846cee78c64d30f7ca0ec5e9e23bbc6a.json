{"remainingRequest":"/home/rahul/Documents/devops/app/view/node_modules/thread-loader/dist/cjs.js!/home/rahul/Documents/devops/app/view/node_modules/babel-loader/lib/index.js!/home/rahul/Documents/devops/app/view/node_modules/eslint-loader/index.js??ref--13-0!/home/rahul/Documents/devops/app/view/src/store/store.js","dependencies":[{"path":"/home/rahul/Documents/devops/app/view/src/store/store.js","mtime":1538867428957},{"path":"/home/rahul/Documents/devops/app/view/node_modules/cache-loader/dist/cjs.js","mtime":1538835835253},{"path":"/home/rahul/Documents/devops/app/view/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/rahul/Documents/devops/app/view/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/rahul/Documents/devops/app/view/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nVue.use(Vuex);\nvar store = new Vuex.Store({\n  state: {\n    messages: []\n  },\n  getters: {\n    getMessages: function getMessages(state) {\n      return state.messages;\n    }\n  },\n  mutations: {\n    setMessages: function setMessages(state, data) {\n      state.messages = data;\n    },\n    setMessage: function setMessage(state, data) {\n      state.messages.unshift(data);\n    },\n    deleteMessage: function deleteMessage(state, data) {\n      var result = state.messages.filter(function (item) {\n        if (item._id != data) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n      state.messages = result;\n    }\n  },\n  actions: {\n    setMessages: function setMessages(context, payload) {\n      axios.get('/api/v1/message').then(function (response) {\n        context.commit('setMessages', response.data.messages);\n      }).catch(function (error) {});\n    },\n    setMessage: function setMessage(context, payload) {\n      context.commit('setMessage', payload);\n    },\n    deleteMessage: function deleteMessage(context, payload) {\n      context.commit('deleteMessage', payload);\n    }\n  }\n});\nexport default store;",{"version":3,"sources":["/home/rahul/Documents/devops/app/view/src/store/store.js"],"names":["Vue","Vuex","axios","use","store","Store","state","messages","getters","getMessages","mutations","setMessages","data","setMessage","unshift","deleteMessage","result","filter","item","_id","actions","context","payload","get","then","response","commit","catch","error"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAF,IAAIG,GAAJ,CAAQF,IAAR;AAEA,IAAMG,QAAM,IAAIH,KAAKI,KAAT,CAAe;AACvBC,SAAM;AACFC,cAAS;AADP,GADiB;AAIvBC,WAAQ;AACJC,eADI,uBACQH,KADR,EACc;AACd,aAAOA,MAAMC,QAAb;AACH;AAHG,GAJe;AASvBG,aAAU;AACNC,eADM,uBACML,KADN,EACYM,IADZ,EACiB;AACnBN,YAAMC,QAAN,GAAeK,IAAf;AACH,KAHK;AAINC,cAJM,sBAIKP,KAJL,EAIWM,IAJX,EAIgB;AAClBN,YAAMC,QAAN,CAAeO,OAAf,CAAuBF,IAAvB;AACH,KANK;AAONG,iBAPM,yBAOQT,KAPR,EAOcM,IAPd,EAOmB;AACrB,UAAII,SAAOV,MAAMC,QAAN,CAAeU,MAAf,CAAsB,gBAAM;AACnC,YAAGC,KAAKC,GAAL,IAAUP,IAAb,EAAkB;AACd,iBAAO,IAAP;AACH,SAFD,MAEK;AACD,iBAAO,KAAP;AACH;AACJ,OANU,CAAX;AAOAN,YAAMC,QAAN,GAAeS,MAAf;AACH;AAhBK,GATa;AA2BvBI,WAAQ;AACJT,eADI,uBACQU,OADR,EACgBC,OADhB,EACwB;AACxBpB,YAAMqB,GAAN,CAAU,iBAAV,EACKC,IADL,CACU,UAASC,QAAT,EAAkB;AACpBJ,gBAAQK,MAAR,CAAe,aAAf,EAA6BD,SAASb,IAAT,CAAcL,QAA3C;AACH,OAHL,EAIKoB,KAJL,CAIW,UAASC,KAAT,EAAe,CAErB,CANL;AAOH,KATG;AAUJf,cAVI,sBAUOQ,OAVP,EAUeC,OAVf,EAUuB;AACvBD,cAAQK,MAAR,CAAe,YAAf,EAA4BJ,OAA5B;AACH,KAZG;AAaJP,iBAbI,yBAaUM,OAbV,EAakBC,OAblB,EAa0B;AAC1BD,cAAQK,MAAR,CAAe,eAAf,EAA+BJ,OAA/B;AACH;AAfG;AA3Be,CAAf,CAAZ;AA8CA,eAAelB,KAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport axios from 'axios'\n\nVue.use(Vuex)\n\nconst store=new Vuex.Store({\n    state:{\n        messages:[]\n    },\n    getters:{\n        getMessages(state){\n            return state.messages;\n        }\n    },\n    mutations:{\n        setMessages(state,data){\n            state.messages=data;\n        },\n        setMessage(state,data){\n            state.messages.unshift(data)\n        },\n        deleteMessage(state,data){\n            var result=state.messages.filter(item=>{\n                if(item._id!=data){\n                    return true;\n                }else{\n                    return false;\n                }\n            })\n            state.messages=result;\n        }\n    },\n    actions:{\n        setMessages(context,payload){\n            axios.get('/api/v1/message')\n                .then(function(response){\n                    context.commit('setMessages',response.data.messages)\n                })\n                .catch(function(error){\n                    \n                })\n        },\n        setMessage(context,payload){\n            context.commit('setMessage',payload)\n        },\n        deleteMessage(context,payload){\n            context.commit('deleteMessage',payload)\n        }\n    }\n})\n\nexport default store;"]}]}